// /js/profile.js
// v2.5.0 ‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è

import { HeaderController } from '/core/HeaderController.js';
import { ThemeManager } from '/core/themeManager.js';
import { MorpheProfile } from '/modules/profile.js';

document.addEventListener('DOMContentLoaded', async () => {
  await HeaderController.loadHeader();
  new ThemeManager();

  const form = document.getElementById('profileForm');
  const viewMode = document.getElementById('viewMode');
  const editMode = document.getElementById('editMode');
  const editBtn = document.getElementById('editBtn');
  const nextBtn = document.getElementById('nextBtn');
  const prevBtn = document.getElementById('prevBtn');
  const progressBar = document.getElementById('progressBar');
  const profileProgressFill = document.getElementById('profileProgressFill');
  const profileProgressText = document.getElementById('profileProgressText');
  const profileStatus = document.getElementById('profileStatus');
  const feedback = document.getElementById('formFeedback');

  const steps = Array.from(document.querySelectorAll('.step'));
  let currentStep = 0;

  const profile = new MorpheProfile();

  const fields = {
    name: document.getElementById('v-name'),
    gender: document.getElementById('v-gender'),
    age: document.getElementById('v-age'),
    height: document.getElementById('v-height'),
    weight: document.getElementById('v-weight'),
    activityPill: document.getElementById('v-activity-pill'),
    workoutType: document.getElementById('v-workoutType'),
    workoutLocation: document.getElementById('v-workoutLocation'),
    goalPill: document.getElementById('v-goal-pill'),
    greeting: document.getElementById('greeting')
  };

  const activityLabels = {
    '1.2': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è',
    '1.375': '–õ—ë–≥–∫–∞—è',
    '1.55': '–°—Ä–µ–¥–Ω—è—è',
    '1.725': '–í—ã—Å–æ–∫–∞—è',
    '1.9': '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è'
  };

  const activityColors = {
    '1.2': '',
    '1.375': 'pill-ok',
    '1.55': 'pill-ok',
    '1.725': 'pill-good',
    '1.9': 'pill-good'
  };

  const goalLabels = {
    lose: '–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å',
    maintain: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É',
    gain: '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É'
  };

  const goalColors = {
    lose: 'pill-bad',
    maintain: 'pill-ok',
    gain: 'pill-good'
  };

  const workoutTypeLabels = {
    balanced: '–°–∏–ª–æ–≤—ã–µ + –∫–∞—Ä–¥–∏–æ',
    cardio: '–ö–∞—Ä–¥–∏–æ',
    strength: '–°–∏–ª–∞',
    light: '–õ—ë–≥–∫–∏–µ'
  };

  function safeParseInt(value, fallback = 0) {
    const num = parseInt(value, 10);
    return isNaN(num) ? fallback : num;
  }

  function safeParseFloat(value, fallback = 0) {
    const num = parseFloat(value);
    return isNaN(num) ? fallback : num;
  }

  function updateProgress() {
    const totalFields = 9;
    let filled = 0;
    const d = profile.data || {};

    if (d.name?.trim()) filled++;
    if (d.gender) filled++;
    if (d.age > 0) filled++;
    if (d.height > 0) filled++;
    if (d.weight > 0) filled++;
    if (d.activityLevel > 0) filled++;
    if (d.workoutLocation) filled++;
    if (d.workoutType) filled++;
    if (d.goal) filled++;

    const percent = Math.round((filled / totalFields) * 100);
    profileProgressFill.style.width = `${percent}%`;
    profileProgressText.textContent = `${percent}%`;

    if (percent === 0) {
      profileStatus.textContent = '–ù–µ –Ω–∞—á–∞—Ç–æ';
    } else if (percent < 50) {
      profileStatus.textContent = '–ï—â—ë –Ω–µ–º–Ω–æ–≥–æ!';
    } else if (percent < 90) {
      profileStatus.textContent = '–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!';
    } else {
      profileStatus.textContent = '–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –º–æ–ª–æ–¥–µ—Ü!';
    }

    return percent;
  }

  function renderProfileView() {
    if (profile.isComplete() && profile.data) {
      const d = profile.data;
      fields.name.textContent = d.name || '‚Äî';
      fields.gender.textContent = d.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π';
      fields.age.textContent = d.age || '‚Äî';
      fields.height.textContent = d.height || '‚Äî';
      fields.weight.textContent = d.weight || '‚Äî';
      fields.workoutType.textContent = workoutTypeLabels[d.workoutType] || '‚Äî';
      fields.workoutLocation.textContent = d.workoutLocation === 'gym' ? '–í –∑–∞–ª–µ' : '–î–æ–º–∞';

      fields.activityPill.textContent = activityLabels[d.activityLevel] || '‚Äî';
      fields.activityPill.className = `pill ${activityColors[d.activityLevel] || ''}`;

      fields.goalPill.textContent = goalLabels[d.goal] || '‚Äî';
      fields.goalPill.className = `pill ${goalColors[d.goal] || ''}`;

      fields.greeting.textContent = d.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      viewMode.style.display = 'block';
      editMode.style.display = 'none';
    } else {
      viewMode.style.display = 'none';
      editMode.style.display = 'block';
    }
    updateProgress();
  }

  renderProfileView();

  editBtn.addEventListener('click', () => {
    viewMode.style.display = 'none';
    editMode.style.display = 'block';
    profile.fillForm(form);
    currentStep = 0;
    showCurrentStep();
  });

  function showCurrentStep() {
    steps.forEach(step => step.classList.remove('active'));
    if (steps[currentStep]) {
      steps[currentStep].classList.add('active');
    }

    progressBar.style.width = `${25 + currentStep * 25}%`;
    nextBtn.textContent = currentStep === steps.length - 1 ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–∞–ª–µ–µ ‚Üí';
    prevBtn.style.display = currentStep > 0 ? 'inline-block' : 'none';
  }

  function nextStep() {
    const currentFields = steps[currentStep].querySelectorAll('[required]');
    let valid = true;

    currentFields.forEach(field => {
      if (!field.checkValidity()) {
        field.reportValidity();
        valid = false;
      }
    });

    if (!valid) return;

    if (currentStep === steps.length - 1) {
      submitForm();
    } else {
      currentStep++;
      showCurrentStep();
    }
  }

  function prevStep() {
    if (currentStep > 0) {
      currentStep--;
      showCurrentStep();
    }
  }

  async function submitForm() {
    const fd = new FormData(form);

    try {
      const data = {
        name: fd.get('name')?.toString().trim(),
        gender: fd.get('gender'),
        age: safeParseInt(fd.get('age')),
        height: safeParseFloat(fd.get('height')),
        weight: safeParseFloat(fd.get('weight')),
        targetWeight: fd.get('targetWeight') ? safeParseFloat(fd.get('targetWeight')) : null,
        activityLevel: safeParseFloat(fd.get('activity')),
        goal: fd.get('goal'),
        workoutType: fd.get('workoutType'),
        workoutLocation: fd.get('workoutLocation'),
        createdAt: profile.data?.createdAt || new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      if (!data.name) throw new Error("–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
      if (data.age <= 0) throw new Error("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
      if (data.height <= 0) throw new Error("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
      if (data.weight <= 0) throw new Error("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0");

      profile.save(data);

      // === üî• –ö–õ–Æ–ß–ï–í–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ø–µ—Ä–µ—Å—á—ë—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è ===
      try {
        const { NutritionEngine } = await import('/core/nutritionEngine.js');
        const engine = new NutritionEngine({  data: profile.data, isComplete: true });
        const newPlan = {
          ...engine.calculateMacros(),
          generatedAt: new Date().toISOString(),
          basedOnWeight: profile.data.weight
        };
        localStorage.setItem('morphe_nutrition_plan', JSON.stringify(newPlan));
        console.log('‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞:', profile.data.weight, '–∫–≥');
      } catch (calcErr) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:', calcErr);
      }

      renderProfileView();

      feedback.innerHTML = '<p class="success-text">‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</p>';
      feedback.classList.add('show');
      setTimeout(() => feedback.classList.remove('show'), 3000);

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
      feedback.innerHTML = `<p class="error-text">‚ùå ${err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'}</p>`;
      feedback.classList.add('show');
      setTimeout(() => feedback.classList.remove('show'), 4000);
    }
  }

  nextBtn.addEventListener('click', nextStep);
  prevBtn.addEventListener('click', prevStep);

  form.addEventListener('keydown', e => {
    if (e.key === 'Enter') {
      e.preventDefault();
      nextStep();
    }
    if (e.key === 'Escape') {
      if (editMode.style.display === 'block') {
        viewMode.style.display = 'block';
        editMode.style.display = 'none';
      }
    }
  });

  showCurrentStep();
});