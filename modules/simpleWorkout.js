// modules/simpleWorkout.js
// Version: 2.0.0

export class SimpleWorkoutGenerator {
  constructor() {
    this.exercises = this.getDefaultExercises();
  }

  // –ë–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç
  getDefaultExercises() {
    return [
      {
        id: "pushup",
        name: "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞",
        type: "push",
        equipment: "none",
        sets: 3,
        reps: "10-15",
        rest: 60
      },
      {
        id: "squat",
        name: "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è",
        type: "legs",
        equipment: "none",
        sets: 3,
        reps: "12-15",
        rest: 60
      },
      {
        id: "plank",
        name: "–ü–ª–∞–Ω–∫–∞",
        type: "core",
        equipment: "none",
        sets: 3,
        reps: "30-60 —Å–µ–∫",
        rest: 30
      },
      {
        id: "db_press",
        name: "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª—ë–∂–∞",
        type: "push",
        equipment: "dumbbells",
        sets: 3,
        reps: "8-12",
        rest: 90
      },
      {
        id: "db_row",
        name: "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ",
        type: "pull",
        equipment: "dumbbells",
        sets: 3,
        reps: "10-12",
        rest: 90
      },
      {
        id: "lunges",
        name: "–í—ã–ø–∞–¥—ã",
        type: "legs",
        equipment: "dumbbells",
        sets: 3,
        reps: "12 –Ω–∞ –Ω–æ–≥—É",
        rest: 60
      }
    ];
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
  generate(profile) {
    console.log("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è:", profile);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    const hasDumbbells = profile.equipment && profile.equipment.includes("dumbbells");
    const equipment = hasDumbbells ? "dumbbells" : "none";
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ 4 –¥–Ω—è
    const program = {
      day1: {
        name: "–î–µ–Ω—å 1: –í–µ—Ä—Ö —Ç–µ–ª–æ",
        type: "upper",
        exercises: this.getExercisesByType("push", equipment)
      },
      day2: {
        name: "–î–µ–Ω—å 2: –û—Ç–¥—ã—Ö",
        type: "rest",
        exercises: []
      },
      day3: {
        name: "–î–µ–Ω—å 3: –ù–∏–∑ —Ç–µ–ª–æ",
        type: "lower",
        exercises: this.getExercisesByType("legs", equipment)
      },
      day4: {
        name: "–î–µ–Ω—å 4: –û—Ç–¥—ã—Ö",
        type: "rest",
        exercises: []
      },
      day5: {
        name: "–î–µ–Ω—å 5: –í—Å–µ —Ç–µ–ª–æ",
        type: "fullbody",
        exercises: [
          ...this.getExercisesByType("push", equipment, 1),
          ...this.getExercisesByType("legs", equipment, 1),
          ...this.getExercisesByType("core", equipment, 1)
        ]
      },
      day6: {
        name: "–î–µ–Ω—å 6: –û—Ç–¥—ã—Ö",
        type: "rest",
        exercises: []
      },
      day7: {
        name: "–î–µ–Ω—å 7: –û—Ç–¥—ã—Ö",
        type: "rest",
        exercises: []
      }
    };

    console.log("‚úÖ –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞:", program);
    return program;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É
  getExercisesByType(type, equipment, limit = 2) {
    return this.exercises
      .filter(ex => ex.type === type && ex.equipment === equipment)
      .slice(0, limit)
      .map(ex => ({
        ...ex,
        recommendedWeight: equipment === "dumbbells" ? 10 : 0
      }));
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É
  saveProgram(program) {
    try {
      localStorage.setItem('morphe_simple_program', JSON.stringify(program));
      console.log("üíæ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É
  loadProgram() {
    try {
      const saved = localStorage.getItem('morphe_simple_program');
      if (saved) {
        console.log("üì• –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
        return JSON.parse(saved);
      }
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", err);
    }
    return null;
  }
}