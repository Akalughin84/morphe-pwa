// modules/profile.js
// Version: 1.5.0

export class MorpheProfile {
  constructor() {
    this.data = this.load();
    console.log("üìÇ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:", this.data);
  }

  // –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  getDefaultProfile() {
    return {
      name: "",
      age: 25,
      gender: "male",
      height: 175,
      weight: 75,
      goal: "muscle", // muscle / fatloss / health
      experience: "beginner", // beginner / intermediate / advanced
      equipment: ["dumbbells"], // dumbbells, bench, bands, none
      injuries: [], // shoulder, back, knee
      availableDays: 4, // 2-7
      timePerSession: 45, // 30, 45, 60, 75
      preferredTime: "morning", // morning / afternoon / evening
      dietaryRestrictions: [],
      completedAt: null,
      createdAt: new Date().toISOString()
    };
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
  load() {
    try {
      const saved = localStorage.getItem('morphe_profile');
      if (saved) {
        const profile = JSON.parse(saved);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!profile.availableDays) {
          profile.availableDays = 4;
        }
        if (!profile.goal) {
          profile.goal = "muscle";
        }
        if (!profile.experience) {
          profile.experience = "beginner";
        }
        if (!profile.equipment) {
          profile.equipment = ["dumbbells"];
        }
        if (!profile.injuries) {
          profile.injuries = [];
        }
        if (!profile.preferredTime) {
          profile.preferredTime = "morning";
        }

        return profile;
      }
    } catch (err) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è, —Å–±—Ä–æ—Å –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º");
    }
    return this.getDefaultProfile();
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
  save() {
    try {
      localStorage.setItem('morphe_profile', JSON.stringify(this.data));
      console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω");
    } catch (err) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å:", err);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è
  update(field, value) {
    this.data[field] = value;
    this.save();
    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${field} =`, value);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π
  updateBatch(data) {
    for (let key in data) {
      this.data[key] = data[key];
    }
    this.save();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –º–∏–Ω–∏–º—É–º –Ω–∞ –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
  isComplete() {
    const required = ['age', 'height', 'weight', 'goal', 'availableDays'];
    return required.every(field => this.data[field] && this.data[field] !== "");
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏: –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω
  markAsCompleted() {
    this.data.completedAt = new Date().toISOString();
    this.save();
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è
  getStatus() {
    if (!this.isComplete()) return "incomplete";
    if (!this.data.completedAt) return "ready";
    return "complete";
  }
}