// /modules/achievementsManager.js
// v1.8.1 ‚Äî –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import { StorageManager } from '/utils/storage.js';

/**
 * AchievementsManager ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–µ–π–¥–∂–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class AchievementsManager {
  constructor(definitions = null) {
    this.storageKey = 'morphe-achievements';
    this.definitions = definitions || this.getDefaultDefinitions();
    this.achievements = this.load();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   */
  load() {
    let data = StorageManager.getItem(this.storageKey) || {};

    // üîÅ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (progress_week_streak ‚Üí week_streak.current)
    if (Object.keys(data).some(key => key.startsWith('progress_'))) {
      const migrated = {};
      for (const [key, value] of Object.entries(data)) {
        if (key.startsWith('progress_')) {
          const id = key.replace('progress_', '');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–±—ä–µ–∫—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          migrated[id] = { current: value };
        } else {
          // –û–±—ã—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
          migrated[key] = value;
        }
      }
      data = migrated;
      StorageManager.setItem(this.storageKey, data); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    }

    return data;
  }

  save() {
    StorageManager.setItem(this.storageKey, this.achievements);
  }

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  getDefaultDefinitions() {
    return [
      {
        id: 'first_profile',
        title: '–ù–∞—á–∞–ª–æ –ø—É—Ç–∏',
        description: '–ó–∞–ø–æ–ª–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å',
        icon: 'üë§',
        type: 'milestone',
        unlocked: false,
        secret: false
      },
      {
        id: 'first_workout',
        title: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        description: '–ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        icon: 'üí™',
        type: 'milestone',
        unlocked: false,
        secret: false
      },
      {
        id: 'week_streak',
        title: '–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥',
        description: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è 7 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞',
        icon: 'üî•',
        type: 'streak',
        target: 7,
        current: 0,
        unlocked: false,
        secret: false
      },
      {
        id: 'first_goal',
        title: '–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞',
        description: '–í—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –ø–æ —Å–∏–ª–µ',
        icon: 'üéØ',
        type: 'goal',
        unlocked: false,
        secret: false
      },
      {
        id: 'weight_progress',
        title: '–í –¥–≤–∏–∂–µ–Ω–∏–∏',
        description: '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –ø—Ä–∏ —Ü–µ–ª–∏ "–ø–æ—Ö—É–¥–µ—Ç—å"',
        icon: 'üìâ',
        type: 'progress',
        unlocked: false,
        secret: false
      },
      {
        id: 'month_streak',
        title: '–ú–µ—Å—è—Ü —Å–∏–ª—ã',
        description: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤',
        icon: 'üöÄ',
        type: 'streak',
        target: 30,
        current: 0,
        unlocked: false,
        secret: false
      },
      {
        id: 'silent_discipline',
        title: '–¢–∏—à–∏–Ω–∞ ‚Äî —Å–∏–ª–∞',
        description: '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª Pro-—Ä–∞–∑–¥–µ–ª',
        icon: 'üßò‚Äç‚ôÇÔ∏è',
        type: 'ethics',
        unlocked: false,
        secret: true
      }
    ];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID
   */
  hasDefinition(id) {
    return this.definitions.some(def => def.id === id);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
   */
  isUnlocked(id) {
    return !!this.achievements[id]?.unlockedAt;
  }

  /**
   * –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  unlock(id) {
    if (!this.hasDefinition(id)) {
      console.warn(`[AchievementsManager] Unknown achievement ID: ${id}`);
      return false;
    }

    if (this.isUnlocked(id)) return false;

    this.achievements[id] = {
      unlockedAt: new Date().toISOString(),
      notified: false
    };
    this.save();
    return true;
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω–æ–µ
   */
  markAsNotified(id) {
    if (this.achievements[id]) {
      this.achievements[id].notified = true;
      this.save();
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
   */
  getAllWithStatus() {
    return this.definitions.map(def => {
      const saved = this.achievements[def.id] || {};
      return {
        ...def,
        unlocked: !!saved.unlockedAt,
        notified: !!saved.notified,
        progress: saved.current != null ? saved.current : null
      };
    });
  }

  /**
   * –ü—Ä–æ–≥—Ä–µ—Å—Å (–¥–ª—è streak'–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å current/target)
   */
  getProgress(id) {
    return this.achievements[id]?.current || 0;
  }

  /**
   * –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  incrementProgress(id, value = 1) {
    if (!this.hasDefinition(id)) {
      console.warn(`[AchievementsManager] Unknown achievement ID for progress: ${id}`);
      return 0;
    }

    const current = this.getProgress(id);
    const newProgress = current + value;

    this.achievements[id] = {
      ...this.achievements[id],
      current: newProgress
    };
    this.save();
    return newProgress;
  }

  /**
   * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  resetProgress(id) {
    if (this.achievements[id]) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ unlockedAt –∏ notified, –µ—Å–ª–∏ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
      const { unlockedAt, notified } = this.achievements[id];
      if (unlockedAt) {
        this.achievements[id] = { unlockedAt, notified };
      } else {
        delete this.achievements[id];
      }
      this.save();
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  getUnlockedCount() {
    return Object.values(this.achievements).filter(
      entry => entry.unlockedAt != null
    ).length;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
   */
  clear() {
    this.achievements = {};
    StorageManager.removeItem(this.storageKey);
  }
}