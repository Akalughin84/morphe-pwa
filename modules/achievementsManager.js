// /modules/achievementsManager.js
// v1.8.2 ‚Äî –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, —É—Ä–æ–≤–Ω–µ–π –∏ confetti

import { StorageManager } from '/utils/storage.js';

/**
 * AchievementsManager ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–µ–π–¥–∂–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –•—Ä–∞–Ω–∏—Ç:
 * - unlockedAt ‚Äî –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–æ
 * - notified ‚Äî –ø–æ–∫–∞–∑–∞–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 * - current ‚Äî —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–¥–ª—è streak'–æ–≤ –∏ –¥—Ä.)
 */
export class AchievementsManager {
  constructor(definitions = null) {
    this.storageKey = 'morphe-achievements';
    this.definitions = definitions || this.getDefaultDefinitions();
    this.achievements = this.load();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (progress_week_streak ‚Üí week_streak.current)
   */
  load() {
    let data = StorageManager.getItem(this.storageKey) || {};

    // üîÅ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    if (Object.keys(data).some(key => key.startsWith('progress_'))) {
      const migrated = {};
      for (const [key, value] of Object.entries(data)) {
        if (key.startsWith('progress_')) {
          const id = key.replace('progress_', '');
          migrated[id] = { current: value };
        } else {
          migrated[key] = value;
        }
      }
      data = migrated;
      StorageManager.setItem(this.storageKey, data);
    }

    return data;
  }

  save() {
    StorageManager.setItem(this.storageKey, this.achievements);
  }

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   * –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: id, title, description, type, icon, secret
   * –î–ª—è streak'–æ–≤: target
   */
  getDefaultDefinitions() {
    return [
      {
        id: 'first_profile',
        title: '–ù–∞—á–∞–ª–æ –ø—É—Ç–∏',
        description: '–ó–∞–ø–æ–ª–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å',
        icon: 'üë§',
        type: 'profile',       // ‚Üê –∏–∑–º–µ–Ω–µ–Ω–æ —Å 'milestone' –Ω–∞ 'profile' –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        unlocked: false,
        secret: false,
        narrative: '–¢—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Å–≤–æ—é —Ü–µ–ª—å. –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∞–∫—Ç –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ.'
      },
      {
        id: 'first_workout',
        title: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        description: '–ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        icon: 'üí™',
        type: 'workout',       // ‚Üê –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        unlocked: false,
        secret: false,
        narrative: '–≠—Ç–æ –Ω–∞—á–∞–ª–æ —á–µ–≥–æ-—Ç–æ –±–æ–ª—å—à–æ–≥–æ. –¢—ã —Å–¥–µ–ª–∞–ª —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –º–Ω–æ–≥–∏–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é—Ç. –ì–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π.'
      },
      {
        id: 'three_day_streak',
        title: '–¢—Ä–∏ –¥–Ω—è –ø–æ–¥—Ä—è–¥',
        description: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è 3 –¥–Ω—è –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞',
        icon: 'üî•',
        type: 'streak',
        target: 3,
        unlocked: false,
        secret: false,
        narrative: '–¢—ã –Ω–∞—à—ë–ª —Ä–∏—Ç–º. –¢—Ä–∏ –¥–Ω—è –ø–æ–¥—Ä—è–¥ ‚Äî —ç—Ç–æ —É–∂–µ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å, –∞ –≤—ã–±–æ—Ä.'
      },
      {
        id: 'week_streak',
        title: '–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥',
        description: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è 7 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞',
        icon: 'üî•',
        type: 'streak',
        target: 7,
        unlocked: false,
        secret: false,
        narrative: '7 –¥–Ω–µ–π –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–∞ ‚Äî —ç—Ç–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏. –¢—ã —É–∂–µ –Ω–µ ¬´–Ω–∞—á–∏–Ω–∞–µ—à—å¬ª, —Ç—ã –∂–∏–≤—ë—à—å –≤ —Ä–∏—Ç–º–µ.'
      },
      {
        id: 'month_streak',
        title: '–ú–µ—Å—è—Ü —Å–∏–ª—ã',
        description: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤',
        icon: 'üöÄ',
        type: 'streak',
        target: 30,
        unlocked: false,
        secret: false,
        narrative: '–¶–µ–ª—ã–π –º–µ—Å—è—Ü ‚Äî —ç—Ç–æ —É–∂–µ –Ω–µ —É—Å–∏–ª–∏–µ, —ç—Ç–æ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏. –¢—ã —Å—Ç–∞–ª —Å–∏–ª—å–Ω–µ–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ–º, –Ω–æ –∏ –¥—É—Ö–æ–º.'
      },
      {
        id: 'first_goal',
        title: '–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞',
        description: '–í—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –ø–æ —Å–∏–ª–µ',
        icon: 'üéØ',
        type: 'goal',
        unlocked: false,
        secret: false,
        narrative: '–¢—ã –¥–æ–∫–∞–∑–∞–ª —Å–µ–±–µ, —á—Ç–æ –º–æ–∂–µ—à—å. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ ‚Äî –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë –±–æ–ª—å—à–µ –ø–æ–±–µ–¥.'
      },
      {
        id: 'weight_progress',
        title: '–í –¥–≤–∏–∂–µ–Ω–∏–∏',
        description: '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –ø—Ä–∏ —Ü–µ–ª–∏ "–ø–æ—Ö—É–¥–µ—Ç—å"',
        icon: 'üìâ',
        type: 'progress',
        unlocked: false,
        secret: false,
        narrative: '–¢—ã –¥–≤–∏–∂–µ—à—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏. –ö–∞–∂–¥—ã–π –∫–∏–ª–æ–≥—Ä–∞–º–º ‚Äî —ç—Ç–æ —à–∞–≥ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è.'
      },
      {
        id: 'silent_discipline',
        title: '–¢–∏—à–∏–Ω–∞ ‚Äî —Å–∏–ª–∞',
        description: '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª Pro-—Ä–∞–∑–¥–µ–ª',
        icon: 'üßò‚Äç‚ôÇÔ∏è',
        type: 'ethics',
        unlocked: false,
        secret: true,
        hint: '–ò–Ω–æ–≥–¥–∞ —Å–∏–ª–∞ ‚Äî –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –±—Ä–∞—Ç—å —Ç–æ, —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç.',
        narrative: '–¢—ã –≤—ã–±—Ä–∞–ª –ø—É—Ç—å –±–µ–∑ —è—Ä–ª—ã–∫–æ–≤. –¢–≤–æ—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî —Ç–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞.'
      },
      {
        id: 'ten_workouts',
        title: '–î–µ—Å—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
        description: '–ó–∞–≤–µ—Ä—à–∏–ª 10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
        icon: 'üèãÔ∏è‚Äç‚ôÇÔ∏è',
        type: 'workout',
        target: 10,
        unlocked: false,
        secret: false,
        narrative: '–¢—ã –ø—Ä–æ—à—ë–ª –ø–µ—Ä–≤—É—é ¬´–¥–µ—Å—è—Ç–∫—É¬ª ‚Äî —ç—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º 80% –Ω–æ–≤–∏—á–∫–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
      }
    ];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID
   */
  hasDefinition(id) {
    return this.definitions.some(def => def.id === id);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
   */
  isUnlocked(id) {
    return !!this.achievements[id]?.unlockedAt;
  }

  /**
   * –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   * @returns {boolean} true, –µ—Å–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤–ø–µ—Ä–≤—ã–µ
   */
  unlock(id) {
    if (!this.hasDefinition(id)) {
      console.warn(`[AchievementsManager] Unknown achievement ID: ${id}`);
      return false;
    }

    if (this.isUnlocked(id)) return false;

    this.achievements[id] = {
      unlockedAt: new Date().toISOString(),
      notified: false
    };
    this.save();
    return true;
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω–æ–µ
   */
  markAsNotified(id) {
    if (this.achievements[id]) {
      this.achievements[id].notified = true;
      this.save();
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–ª—è UI
   * –í–∫–ª—é—á–∞–µ—Ç: unlocked, notified, progress, target, type, secret
   */
  getAllWithStatus() {
    return this.definitions.map(def => {
      const saved = this.achievements[def.id] || {};
      return {
        ...def,
        unlocked: !!saved.unlockedAt,
        notified: !!saved.notified,
        // –ü—Ä–æ–≥—Ä–µ—Å—Å: –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ current –∏–ª–∏ 0
        progress: saved.current != null ? saved.current : 0,
        // –¶–µ–ª—å: –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–¥–ª—è streak'–æ–≤)
        target: def.target || null
      };
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–±–æ—Ä ID –≤—Å–µ—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
   * @returns {Set<string>}
   */
  getUnlocked() {
    const unlocked = new Set();
    for (const [id, data] of Object.entries(this.achievements)) {
      if (data.unlockedAt) unlocked.add(id);
    }
    return unlocked;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  getUnlockedCount() {
    return Object.values(this.achievements).filter(
      entry => entry.unlockedAt != null
    ).length;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ ID
   */
  getProgress(id) {
    return this.achievements[id]?.current || 0;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ AchievementEngine)
   * @param {string} id
   * @param {number} value
   * @returns {number} –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
   */
  setProgress(id, value) {
    if (!this.hasDefinition(id)) {
      console.warn(`[AchievementsManager] Unknown achievement ID for progress: ${id}`);
      return 0;
    }

    // –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º unlockedAt –∏ notified
    const existing = this.achievements[id] || {};
    this.achievements[id] = {
      ...existing,
      current: value
    };
    this.save();
    return value;
  }

  /**
   * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å)
   */
  resetProgress(id) {
    if (this.achievements[id]) {
      const { unlockedAt, notified } = this.achievements[id];
      if (unlockedAt) {
        this.achievements[id] = { unlockedAt, notified };
      } else {
        delete this.achievements[id];
      }
      this.save();
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
   */
  clear() {
    this.achievements = {};
    StorageManager.removeItem(this.storageKey);
  }
}