// /modules/achievementsManager.js
// v1.8.0 ‚Äî –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

import { StorageManager } from '/utils/storage.js';

/**
 * AchievementsManager ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–µ–π–¥–∂–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class AchievementsManager {
  constructor() {
    this.storageKey = 'morphe-achievements';
    this.achievements = this.load();
    this.definitions = this.getDefinitions();
  }

  load() {
    return StorageManager.getItem(this.storageKey) || {};
  }

  save() {
    StorageManager.setItem(this.storageKey, this.achievements);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  getDefinitions() {
    return [
      {
        id: 'first_profile',
        title: '–ù–∞—á–∞–ª–æ –ø—É—Ç–∏',
        description: '–ó–∞–ø–æ–ª–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å',
        icon: 'üë§',
        type: 'milestone',
        unlocked: false,
        secret: false
      },
      {
        id: 'first_workout',
        title: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        description: '–ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        icon: 'üí™',
        type: 'milestone',
        unlocked: false,
        secret: false
      },
      {
        id: 'week_streak',
        title: '–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥',
        description: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è 7 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞',
        icon: 'üî•',
        type: 'streak',
        target: 7,
        current: 0,
        unlocked: false,
        secret: false
      },
      {
        id: 'first_goal',
        title: '–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞',
        description: '–í—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –ø–æ —Å–∏–ª–µ',
        icon: 'üéØ',
        type: 'goal',
        unlocked: false,
        secret: false
      },
      {
        id: 'weight_progress',
        title: '–í –¥–≤–∏–∂–µ–Ω–∏–∏',
        description: '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –ø—Ä–∏ —Ü–µ–ª–∏ "–ø–æ—Ö—É–¥–µ—Ç—å"',
        icon: 'üìâ',
        type: 'progress',
        unlocked: false,
        secret: false
      },
      {
        id: 'month_streak',
        title: '–ú–µ—Å—è—Ü —Å–∏–ª—ã',
        description: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤',
        icon: 'üöÄ',
        type: 'streak',
        target: 30,
        current: 0,
        unlocked: false,
        secret: false
      },
      {
        id: 'silent_discipline',
        title: '–¢–∏—à–∏–Ω–∞ ‚Äî —Å–∏–ª–∞',
        description: '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª Pro-—Ä–∞–∑–¥–µ–ª',
        icon: 'üßò‚Äç‚ôÇÔ∏è',
        type: 'ethics',
        unlocked: false,
        secret: true
      }
    ];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
   */
  isUnlocked(id) {
    return !!this.achievements[id];
  }

  /**
   * –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  unlock(id) {
    if (this.isUnlocked(id)) return false;

    this.achievements[id] = {
      unlockedAt: new Date().toISOString(),
      notified: false
    };
    this.save();
    return true;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
   */
  getAllWithStatus() {
    return this.definitions.map(def => ({
      ...def,
      unlocked: this.isUnlocked(def.id),
      progress: this.getProgress(def.id)
    }));
  }

  /**
   * –ü—Ä–æ–≥—Ä–µ—Å—Å (–¥–ª—è streak'–æ–≤)
   */
  getProgress(id) {
    if (id === 'week_streak') return this.achievements[id]?.current || 0;
    if (id === 'month_streak') return this.achievements[id]?.current || 0;
    return null;
  }

  /**
   * –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  incrementProgress(id, value = 1) {
    const key = `progress_${id}`;
    const current = this.achievements[key] || 0;
    this.achievements[key] = current + value;
    this.save();
    return this.achievements[key];
  }

  /**
   * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  resetProgress(id) {
    delete this.achievements[`progress_${id}`];
    this.save();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö
   */
  getUnlockedCount() {
    return Object.keys(this.achievements).filter(k => !k.startsWith('progress_')).length;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
   */
  clear() {
    this.achievements = {};
    StorageManager.removeItem(this.storageKey);
  }
}