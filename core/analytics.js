// /core/analytics.js
// v2.1.0 ‚Äî –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: dynamic import –≤–º–µ—Å—Ç–æ require

import { UserService } from '/services/userService.js';
import { DateUtils } from '/utils/dateUtils.js';

/**
 * AnalyticsEngine ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
 * –í–º–µ—Å—Ç–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ‚Äî —Å–º—ã—Å–ª.
 */
export class AnalyticsEngine {
  constructor(profile = null) {
    this._profile = profile;
    this._workouts = null;
    this._progress = null;
    this._nutrition = null;
    this._goals = null;
  }

  async _loadDependencies() {
    if (this._workouts === null) {
      const { WorkoutTracker } = await import('/modules/workoutTracker.js');
      this._workouts = new WorkoutTracker();
    }
    if (this._progress === null) {
      const { ProgressTracker } = await import('/modules/progressTracker.js');
      this._progress = new ProgressTracker();
    }
    if (this._nutrition === null) {
      const { NutritionTracker } = await import('/modules/nutritionTracker.js');
      this._nutrition = new NutritionTracker();
    }
    if (this._goals === null) {
      try {
        const { StrengthGoalTracker } = await import('/core/strengthGoalTracker.js');
        this._goals = new StrengthGoalTracker();
      } catch (e) {
        // StrengthGoalTracker –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        this._goals = null;
      }
    }
  }

  get profile() {
    if (this._profile === undefined) {
      const user = UserService.getProfile();
      this._profile = user ? user.data : null;
    }
    return this._profile;
  }

  get workouts() {
    return this._workouts;
  }

  get progress() {
    return this._progress;
  }

  get nutrition() {
    return this._nutrition;
  }

  get goals() {
    return this._goals;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
   */
  async getSummary() {
    await this._loadDependencies();
    if (!this.profile) {
      return {
        title: "–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å",
        summary: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –∏ Morphe –Ω–∞—á–Ω—ë—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å."
      };
    }

    const weekly = this._getWeeklyAnalysis();
    const progress = await this._getProgressInsight();
    const nutrition = this._getNutritionInsight();
    const goals = this._getGoalsInsight();

    return {
      title: this._getTitle(progress.trend, weekly.consistency),
      summary: [
        weekly.text,
        progress.text,
        nutrition.text,
        goals.text
      ].filter(Boolean).join(' ')
    };
  }

  _getTitle(weightTrend, consistency) {
    if (consistency === 'excellent' && weightTrend === 'on-track') {
      return "–û—Ç–ª–∏—á–Ω—ã–π —Ç–µ–º–ø!";
    }
    if (consistency === 'good' && weightTrend === 'on-track') {
      return "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏";
    }
    if (consistency === 'low') {
      return "–ü–æ—Ä–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è";
    }
    return "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å";
  }

  _getWeeklyAnalysis() {
    const lastWeek = this.workouts.getLastWeek();
    const prevWeek = this._getPreviousWeek();

    const currentCount = lastWeek.length;
    const prevCount = prevWeek.length;

    let consistency = 'low';
    let text = '';

    if (currentCount >= 4) {
      consistency = 'excellent';
      text = '–í—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É.';
    } else if (currentCount >= 3) {
      consistency = 'good';
      text = '–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.';
    } else if (currentCount >= 1) {
      consistency = 'medium';
      text = '–í—ã –Ω–∞—á–∞–ª–∏. –¢–µ–ø–µ—Ä—å –≤–∞–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É.';
    } else {
      text = '–í—ã –¥–∞–≤–Ω–æ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ù–∞—á–Ω–∏—Ç–µ —Å –ª—ë–≥–∫–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.';
    }

    // –î–∏–Ω–∞–º–∏–∫–∞
    if (prevCount > 0) {
      const change = ((currentCount - prevCount) / prevCount) * 100;
      if (change > 20) {
        text += ' –í—ã —É–≤–µ–ª–∏—á–∏–ª–∏ —á–∞—Å—Ç–æ—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚Äî –æ—Ç–ª–∏—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞!';
      } else if (change < -20) {
        text += ' –ß–∞—Å—Ç–æ—Ç–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É.';
      }
    }

    return { count: currentCount, consistency, text };
  }

  /**
   * ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
   */
  _getPreviousWeek() {
    const now = new Date();
    const startOfCurrentWeek = new Date(now);
    startOfCurrentWeek.setDate(now.getDate() - now.getDay()); // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

    const startOfPrevWeek = new Date(startOfCurrentWeek);
    startOfPrevWeek.setDate(startOfCurrentWeek.getDate() - 7);
    const endOfPrevWeek = new Date(startOfCurrentWeek);

    const startTime = startOfPrevWeek.getTime();
    const endTime = endOfPrevWeek.getTime();

    return this.workouts.getAll().filter(t => t.timestamp >= startTime && t.timestamp < endTime);
  }

  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  async _getProgressInsight() {
    await this._loadDependencies();
    const recent = this.progress.getSince(21);
    if (recent.length < 2) {
      return { trend: 'unknown', text: '' };
    }

    const first = recent[recent.length - 1];
    const last = recent[0];
    const weeks = Math.max(1, recent.length / 7);
    const changePerWeek = (last.weight - first.weight) / weeks;

    let trend = 'off-track';
    let text = '';

    if (this.profile.goal === 'lose') {
      if (changePerWeek < -0.3) {
        trend = 'on-track';
        text = `–í—ã —Ç–µ—Ä—è–µ—Ç–µ –≤–µ—Å –≤ —Ö–æ—Ä–æ—à–µ–º —Ç–µ–º–ø–µ ‚Äî –æ–∫–æ–ª–æ ${Math.abs(changePerWeek).toFixed(1)} –∫–≥ –≤ –Ω–µ–¥–µ–ª—é.`;
      } else if (changePerWeek > 0) {
        text = '–í–µ—Å —Ä–∞—Å—Ç—ë—Ç, —Ö–æ—Ç—è —Ü–µ–ª—å ‚Äî –ø–æ—Ö—É–¥–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ.';
      } else {
        text = '–í–µ—Å –ø–æ—á—Ç–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏.';
      }
    } else if (this.profile.goal === 'gain') {
      if (changePerWeek > 0.3) {
        trend = 'on-track';
        text = `–í—ã –Ω–∞–±–∏—Ä–∞–µ—Ç–µ –≤–µ—Å —Å —Ö–æ—Ä–æ—à–µ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é ‚Äî ${changePerWeek.toFixed(1)} –∫–≥ –≤ –Ω–µ–¥–µ–ª—é.`;
      } else if (changePerWeek < 0) {
        text = '–í–µ—Å —Å–Ω–∏–∂–∞–µ—Ç—Å—è, —Ö–æ—Ç—è —Ü–µ–ª—å ‚Äî –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã. –£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ª–æ—Ä–∏–∏.';
      } else {
        text = '–í–µ—Å —Å—Ç–∞–±–∏–ª–µ–Ω. –î–ª—è —Ä–æ—Å—Ç–∞ –º—ã—à—Ü –Ω—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏—Ü–∏—Ç.';
      }
    } else if (this.profile.goal === 'maintain') {
      if (Math.abs(changePerWeek) < 0.2) {
        trend = 'on-track';
        text = '–û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ —Ñ–æ—Ä–º—É ‚Äî –∫–æ–ª–µ–±–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã.';
      } else {
        text = '–§–æ—Ä–º–∞ –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—è–µ—Ç—Å—è. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ ‚Äî —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ.';
      }
    }

    return { trend, text };
  }

  _getNutritionInsight() {
    try {
      const today = this.nutrition.getAllToday();
      if (today.length === 0) {
        return { text: '–°–µ–≥–æ–¥–Ω—è –≤—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏.' };
      }

      const totals = this.nutrition.getTotalMacrosToday();
      const plan = UserService.getNutritionPlan?.();
      let text = '';

      if (plan?.macros) {
        const proteinPct = (totals.protein / plan.macros.protein) * 100;
        if (proteinPct < 70) {
          text = '–°–µ–≥–æ–¥–Ω—è –≤—ã –ø–æ—Ç—Ä–µ–±–∏–ª–∏ –º–∞–ª–æ –±–µ–ª–∫–∞. –î–æ–±–∞–≤—å—Ç–µ —è–π—Ü–∞, —Ç–≤–æ—Ä–æ–≥ –∏–ª–∏ –∫—É—Ä–∏—Ü—É.';
        } else if (proteinPct > 130) {
          text = '–ë–µ–ª–∫–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!';
        } else {
          text = '–ü–∏—Ç–∞–Ω–∏–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–ª–∫–∞ –∏ —ç–Ω–µ—Ä–≥–∏–∏.';
        }
      } else {
        text = '–í—ã —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–∞–ª–∏ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ ‚Äî —ç—Ç–æ —É–∂–µ —à–∞–≥ –≤–ø–µ—Ä—ë–¥!';
      }

      return { text };
    } catch (e) {
      console.warn('[AnalyticsEngine] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è:', e);
      return { text: '' };
    }
  }

  _getGoalsInsight() {
    try {
      if (!this._goals) return { text: '' };
      
      const completed = this.goals.getCompleted();
      const active = this.goals.getActive();

      if (completed.length > 0) {
        const suffix = completed.length === 1 ? '—å' : '–∏';
        return { text: `üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${completed.length} —Ü–µ–ª–∏${suffix} –ø–æ —Å–∏–ª–µ. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!` };
      }

      if (active.length > 0) {
        const forecasts = active
          .map(goal => ({ goal, forecast: this.goals.getCompletionForecast(goal) }))
          .filter(item => item.forecast)
          .sort((a, b) => a.forecast.days - b.forecast.days);

        if (forecasts.length > 0) {
          const { goal, forecast } = forecasts[0];
          return { text: `üéØ –ë–ª–∏–∂–∞–π—à–∞—è —Ü–µ–ª—å: "${goal.exerciseName}". –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ‚Äî —á–µ—Ä–µ–∑ ${forecast.days} –¥–Ω–µ–π.` };
        }
      }

      return { text: '' };
    } catch (e) {
      console.warn('[AnalyticsEngine] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ–π:', e);
      return { text: '' };
    }
  }
}