// /core/nutritionEngine.js
// v2.6.0 ‚Äî –†–∞—Å—á—ë—Ç –ë–ñ–£ –æ—Ç –¢–ï–ö–£–©–ï–ì–û –≤–µ—Å–∞ + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫—É—Ä–µ–Ω–∏—è, –∞–ª–∫–æ–≥–æ–ª—è, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–æ–≤
// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å v2.5.0

export class NutritionEngine {
  constructor(profile) {
    if (!profile || !profile.isComplete || !profile.data) {
      throw new Error("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—ã.");
    }
    this.profile = profile.data;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º (BMR) –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞.
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–∏–π –≤–µ—Å (profile.weight).
   */
  calculateBMR() {
    const { weight, height, age, gender } = this.profile;

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const numWeight = parseFloat(weight);
    const numHeight = parseFloat(height);
    const numAge = parseFloat(age);

    if (isNaN(numWeight) || numWeight <= 0) throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å: " + weight);
    if (isNaN(numHeight) || numHeight <= 0) throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç: " + height);
    if (isNaN(numAge) || numAge <= 0) throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: " + age);

    // –§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
    let bmr = gender === 'male'
      ? 10 * numWeight + 6.25 * numHeight - 5 * numAge + 5
      : 10 * numWeight + 6.25 * numHeight - 5 * numAge - 161;

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π BMR –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    return Math.max(800, Math.round(bmr));
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç—ã (TDEE) —Å —É—á—ë—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
   */
  calculateTDEE() {
    const bmr = this.calculateBMR();
    const activityLevel = parseFloat(this.profile.activityLevel) || 1.375;
    const clampedActivity = Math.min(2.5, Math.max(1.2, activityLevel));
    return Math.round(bmr * clampedActivity);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–∏, –∞–ª–∫–æ–≥–æ–ª—è –∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.
   */
  calculateTargetCalories() {
    const tdee = this.calculateTDEE();
    let adjustment;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const hasDiabetes = Array.isArray(this.profile.chronicConditions) && 
                        this.profile.chronicConditions.includes('diabetes');
    const hasHeartDisease = Array.isArray(this.profile.chronicConditions) && 
                            this.profile.chronicConditions.includes('heart');

    switch (this.profile.goal) {
      case 'lose':
        if (hasDiabetes || hasHeartDisease) {
          // –ú—è–≥–∫–∏–π –¥–µ—Ñ–∏—Ü–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
          adjustment = Math.max(200, tdee * 0.1);
        } else {
          // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç: 15‚Äì20%
          adjustment = Math.max(300, tdee * 0.15);
        }
        break;
      case 'gain':
        adjustment = tdee * 0.1;
        break;
      default: // maintain –∏–ª–∏ health
        adjustment = 0;
    }

    // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –±—É—Ñ–µ—Ä)
    if (this.profile.alcohol === 'frequent') {
      adjustment = Math.max(0, adjustment - 250);
    } else if (this.profile.alcohol === 'occasional') {
      adjustment = Math.max(0, adjustment - 150);
    }

    const target = tdee + (this.profile.goal === 'gain' ? adjustment : -adjustment);
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω)
    const minCalories = this.profile.gender === 'female' ? 1200 : 1500;
    return Math.round(Math.max(minCalories, target));
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (–ë–ñ–£).
   * –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–ï–ö–£–©–ò–ô –≤–µ—Å (profile.weight).
   */
  calculateMacros() {
    const calories = this.calculateTargetCalories();
    const currentWeight = parseFloat(this.profile.weight); // ‚Üê –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï

    if (isNaN(currentWeight) || currentWeight <= 0) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ë–ñ–£");
    }

    // –ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –±–µ–ª–∫–∞ (–≥/–∫–≥ –æ—Ç –¢–ï–ö–£–©–ï–ì–û –≤–µ—Å–∞)
    let proteinPerKg;
    if (this.profile.goal === 'lose') {
      proteinPerKg = 2.4; // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º—ã—à—Ü –≤ –¥–µ—Ñ–∏—Ü–∏—Ç–µ
    } else if (this.profile.goal === 'gain') {
      proteinPerKg = 2.2; // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏–∏
    } else {
      proteinPerKg = 1.8; // –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ
    }

    const proteinGrams = Math.round(currentWeight * proteinPerKg);
    const proteinCalories = proteinGrams * 4;

    // –ñ–∏—Ä—ã: 25% –æ—Ç –æ–±—â–µ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
    const fatPercentage = 0.25;
    const fatCalories = calories * fatPercentage;
    const fatGrams = Math.round(fatCalories / 9);

    // –£–≥–ª–µ–≤–æ–¥—ã: –æ—Å—Ç–∞—Ç–æ–∫
    const carbsCalories = Math.max(0, calories - proteinCalories - fatCalories);
    const carbGrams = Math.round(carbsCalories / 4);

    return {
      calories,
      protein: proteinGrams,
      fats: fatGrams,
      carbs: carbGrams
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏, –∞–Ω–∞–ª–∏–∑–æ–≤, –∫—É—Ä–µ–Ω–∏—è –∏ –∞–ª–∫–æ–≥–æ–ª—è.
   */
  getAdvice() {
    const { goal } = this.profile;
    const macros = this.calculateMacros();
    let baseAdvice = "";

    // –ë–∞–∑–æ–≤—ã–π —Å–æ–≤–µ—Ç –ø–æ —Ü–µ–ª–∏
    if (goal === 'lose') {
      baseAdvice = `–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç. –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –±–µ–ª–∫–µ (${macros.protein} –≥) –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—à—Ü.`;
    } else if (goal === 'gain') {
      baseAdvice = `–¶–µ–ª—å ‚Äî –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∏—Ç–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ. –ï—à—å—Ç–µ –∫–∞–∂–¥—ã–µ 3‚Äì4 —á–∞—Å–∞, –≤–∫–ª—é—á–∞—è ${macros.carbs} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤.`;
    } else if (goal === 'health') {
      baseAdvice = `–í–∞—à–∞ —Ü–µ–ª—å ‚Äî –∑–¥–æ—Ä–æ–≤—å–µ. –§–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å.`;
    } else {
      baseAdvice = `–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –¥–µ—Ä–∂–∞—Ç—å—Å—è –æ–∫–æ–ª–æ ${macros.calories} –∫–∫–∞–ª –≤ –¥–µ–Ω—å.`;
    }

    // –ê–Ω–∞–ª–∏–∑—ã ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
    if (this.profile.hemoglobin !== null && this.profile.hemoglobin < 120) {
      baseAdvice += "\n\nü©∏ –ù–∏–∑–∫–∏–π –≥–µ–º–æ–≥–ª–æ–±–∏–Ω. –ï—à—å—Ç–µ –±–æ–ª—å—à–µ: –ø–µ—á–µ–Ω–∏, –≥–æ–≤—è–¥–∏–Ω—ã, —à–ø–∏–Ω–∞—Ç–∞, –≥—Ä–∞–Ω–∞—Ç–∞.";
    }
    if (this.profile.vitaminD !== null && this.profile.vitaminD < 30) {
      baseAdvice += "\n\n‚òÄÔ∏è –ù–∏–∑–∫–∏–π –≤–∏—Ç–∞–º–∏–Ω D. –£–≤–µ–ª–∏—á—å—Ç–µ: –∂–∏—Ä–Ω—É—é —Ä—ã–±—É, —è–∏—á–Ω—ã–µ –∂–µ–ª—Ç–∫–∏, –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–æ–ª–Ω—Ü–µ.";
    }

    // –ö—É—Ä–µ–Ω–∏–µ
    if (this.profile.smoking && this.profile.smoking !== 'no') {
      baseAdvice += "\n\nüö≠ –í—ã –∫—É—Ä–∏—Ç–µ ‚Äî —ç—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç —É—Å–≤–æ–µ–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ C –∏ D. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ, –±–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü, –∂–∏—Ä–Ω—É—é —Ä—ã–±—É.";
    }

    // –ê–ª–∫–æ–≥–æ–ª—å
    if (this.profile.alcohol && this.profile.alcohol !== 'none') {
      baseAdvice += "\n\nüç∑ –ê–ª–∫–æ–≥–æ–ª—å –∑–∞–º–µ–¥–ª—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –≤ –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.";
    }

    return baseAdvice;
  }

  // === –°–û–•–†–ê–ù–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ê–õ–õ–ï–†–ì–ò–ô (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–ª–ª–µ—Ä–≥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param {Array} allFoods ‚Äî –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   * @param {Array} userAllergies ‚Äî –º–∞—Å—Å–∏–≤ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['dairy', 'nuts'])
   * @returns {Array} ‚Äî –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
   */
  filterSafeFoods(allFoods, userAllergies = []) {
    if (!Array.isArray(userAllergies) || userAllergies.length === 0) {
      return allFoods;
    }

    return allFoods.filter(food => {
      if (!food.allergens || food.allergens.length === 0) {
        return true; // –ë–µ–∑ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ ‚Äî –±–µ–∑–æ–ø–∞—Å–µ–Ω
      }
      return !food.allergens.some(allergen => 
        userAllergies.includes(allergen)
      );
    });
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–º–µ–Ω—É –¥–ª—è –∞–ª–ª–µ—Ä–≥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
   * @param {Object} food ‚Äî –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
   * @param {Array} allFoods ‚Äî –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   * @param {Array} userAllergies ‚Äî –∞–ª–ª–µ—Ä–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Object|null} ‚Äî –∑–∞–º–µ–Ω–∞ –∏–ª–∏ null
   */
  getSubstitute(food, allFoods, userAllergies = []) {
    const safeFoods = this.filterSafeFoods(allFoods, userAllergies);
    
    // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±–µ–ª–∫—É
    const candidates = safeFoods.filter(f => 
      f.category === food.category &&
      Math.abs((f.protein || 0) - (food.protein || 0)) < 10 &&
      Math.abs((f.calories || 0) - (food.calories || 0)) < 100
    );

    return candidates.length > 0 ? candidates[0] : null;
  }
}