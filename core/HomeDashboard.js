// /core/HomeDashboard.js
// v1.2.0 ‚Äî –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å AIAssistant

import { UserService } from '/services/userService.js';

export class HomeDashboard {
  constructor() {
    this.profile = null;
    this.nutritionPlan = null;
    this.aiAssistant = null;        // ‚Üê —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ò–ò
    this.currentAdvice = null;      // ‚Üê —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–æ–≤–µ—Ç
  }

  async init() {
    try {
      this.profile = await this.loadProfile();
      this.nutritionPlan = UserService.getNutritionPlan();

      if (!this.profile) {
        this.showGuestView();
        return;
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ò–ò –æ–¥–∏–Ω —Ä–∞–∑
      const { AIAssistant } = await import('/core/aiAssistant.js');
      this.aiAssistant = new AIAssistant();

      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      this.updateGreeting();
      this.updateWeightAndGoal();
      await this.updateWeightDisplay();
      this.updateLastWorkout();
      this.updateReadiness();
      this.updateCTA();
      await this.updateAISuggestion(); // ‚Üê —Ç–µ–ø–µ—Ä—å —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ HomeDashboard:', err);
      this.showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
    }
  }

  loadProfile() {
    const profile = UserService.getProfile();
    return Promise.resolve(profile ? profile.data : null);
  }

  updateGreeting() {
    const el = document.getElementById('user-greeting');
    if (el && this.profile) {
      el.textContent = this.profile.name;
    }
  }

  updateWeightAndGoal() {
    const el = document.getElementById('current-stats');
    if (!el || !this.profile) return;

    const goalLabels = {
      lose: '–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å',
      maintain: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É',
      gain: '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É'
    };

    el.innerHTML = `
      <div class="stat-row">
        <strong>‚öñÔ∏è ${this.profile.weight} –∫–≥</strong>
        <small>–†–æ—Å—Ç ${this.profile.height} —Å–º ‚Ä¢ ${this.profile.age} –ª–µ—Ç</small>
      </div>
      <div class="stat-row">
        <strong>üéØ ${goalLabels[this.profile.goal] || '‚Äî'}</strong>
      </div>
    `;
  }

  async updateWeightDisplay() {
    const el = document.getElementById('current-stats');
    if (!el || !this.profile) return;

    try {
      const { ProgressTracker } = await import('/modules/progressTracker.js');
      const tracker = new ProgressTracker();
      const last = tracker.getLast();

      if (last) {
        const weightEl = el.querySelector('.stat-row:first-child strong');
        if (weightEl) {
          weightEl.textContent = `‚öñÔ∏è ${last.weight} –∫–≥`;
        }
      }
    } catch (err) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞:', err);
    }
  }

  async updateLastWorkout() {
    const el = document.getElementById('last-workout');
    if (!el) return;

    try {
      const { WorkoutTracker } = await import('/modules/workoutTracker.js');
      const tracker = new WorkoutTracker();
      const last = tracker.getLast();

      if (last) {
        const date = new Date(last.timestamp);
        const day = date.toLocaleDateString('ru-RU', { day: '2-digit', month: 'short' });
        el.innerHTML = `<strong>${day}</strong>: ${last.programName || last.workoutName}`;
      } else {
        el.textContent = '‚Äî';
      }
    } catch (err) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:', err);
      el.textContent = '‚Äî';
    }
  }

  async updateReadiness() {
    const el = document.getElementById('readiness-score');
    if (!el) return;

    try {
      const { AdaptiveEngine } = await import('/modules/adaptiveEngine.js');
      const engine = new AdaptiveEngine();
      await engine.loadProfile();

      const score = engine.getReadinessScore();
      el.innerHTML = `
        <div class="score-badge" data-readiness="${score}">
          ${this.getReadinessEmoji(score)} –£—Ä–æ–≤–µ–Ω—å: ${score}/10
        </div>
        <small>${this.getReadinessAdvice(score)}</small>
      `;
    } catch (err) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:', err);
      const today = new Date().getDay();
      const isHighLoadDay = [1, 3, 5].includes(today);
      const score = isHighLoadDay ? 7 : 9;
      el.innerHTML = `
        <div class="score-badge" data-readiness="${score}">
          ${this.getReadinessEmoji(score)} –£—Ä–æ–≤–µ–Ω—å: ${score}/10
        </div>
        <small>${this.getReadinessAdvice(score)}</small>
      `;
    }
  }

  getReadinessEmoji(score) {
    if (score >= 8) return 'üü¢';
    if (score >= 6) return 'üü°';
    return 'üî¥';
  }

  getReadinessAdvice(score) {
    if (score >= 8) return '–û—Ç–ª–∏—á–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å! –ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.';
    if (score >= 6) return '–•–æ—Ä–æ—à–æ, –Ω–æ —Å–ª—É—à–∞–π —Ç–µ–ª–æ. –ù–µ —Ñ–æ—Ä—Å–∏—Ä—É–π.';
    return '–ù–∏–∑–∫–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å. –õ—É—á—à–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –ª—ë–≥–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.';
  }

  updateCTA() {
    const cta = document.querySelector('.cta-button');
    if (!cta) return;

    const hour = new Date().getHours();
    let text = '–ù–∞—á–∞—Ç—å –º–æ—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Üí';

    if (hour >= 5 && hour < 12) {
      text = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–∞—Ç—å –¥–µ–Ω—å —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? üí™';
    } else if (hour >= 12 && hour < 18) {
      text = '–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É? üöÄ';
    } else {
      text = '–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å —Å–µ–≥–æ–¥–Ω—è —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ üåô';
    }

    cta.textContent = text;
  }

  // === –û–ë–ù–û–í–õ–Å–ù–ù–´–ô –ú–ï–¢–û–î –° –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–¨–Æ ===
  async updateAISuggestion() {
    const el = document.getElementById('ai-suggestion');
    if (!el || !this.aiAssistant) return;

    try {
      const advice = await this.aiAssistant.generateAdvice();
      this.currentAdvice = advice; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

      // –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å –∫–Ω–æ–ø–∫–∞–º–∏
      el.innerHTML = `
        <div class="ai-advice-card">
          <div class="ai-badge">${advice.emoji || 'üí°'}</div>
          <div class="ai-text">
            <strong>${advice.title}</strong>
            <small>${advice.message}</small>
          </div>
          <div class="ai-actions">
            <button class="btn btn-sm btn-outline" data-reaction="accepted">–ü–æ–Ω—è—Ç–Ω–æ</button>
            <button class="btn btn-sm btn-outline" data-reaction="ignored">–ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ</button>
            <button class="btn btn-sm btn-outline" data-reaction="not_helpful">–ù–µ –ø–æ–º–æ–≥–ª–æ</button>
          </div>
        </div>
      `;

      // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      el.querySelectorAll('.ai-actions button').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const reaction = e.target.dataset.reaction;
          if (this.currentAdvice && this.aiAssistant) {
            this.aiAssistant.recordAdviceFeedback(this.currentAdvice.id, reaction);
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–≤–µ—Ç —Å—Ä–∞–∑—É
            setTimeout(() => this.updateAISuggestion(), 300);
          }
        });
      });

    } catch (err) {
      console.warn('–°–æ–≤–µ—Ç –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', err);
      el.innerHTML = '<small>–°–æ–≤–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.</small>';
    }
  }

  showGuestView() {
    const el = document.getElementById('user-greeting');
    if (el) el.textContent = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    const stats = document.getElementById('current-stats');
    if (stats) {
      stats.innerHTML = `<p><a href="/pages/profile.html" class="link-primary">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</a>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.</p>`;
    }
  }

  showError(message) {
    const el = document.getElementById('dashboardStatus') || document.body;
    el.innerHTML = `<p class="error-text">${message}</p>`;
  }
}