// /core/HomeDashboard.js

import { UserService } from '/services/userService.js';
import { StorageManager } from '/utils/storage.js';

/**
 * HomeDashboard ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –∏–º—è, –≤–µ—Å, —Ü–µ–ª—å, –ø—Ä–æ–≥—Ä–µ—Å—Å, —Å–æ–≤–µ—Ç
 */
export class HomeDashboard {
  constructor() {
    this.profile = null;
    this.nutritionPlan = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
   */
  async init() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      this.profile = await this.loadProfile();
      this.nutritionPlan = UserService.getNutritionPlan();

      if (!this.profile) {
        this.showGuestView();
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      this.updateGreeting();
      await this.updateWeightAndGoal();
      this.updateWeightAndGoal();
      this.updateLastWorkout();
      this.updateReadiness();
      this.updateCTA();

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ HomeDashboard:', err);
      this.showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ UserService
   */
  loadProfile() {
    return new Promise((resolve) => {
      const profile = UserService.getProfile();
      resolve(profile ? profile.data : null);
    });
  }

  /**
   * –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
   */
  updateGreeting() {
    const el = document.getElementById('user-greeting');
    if (el && this.profile) {
      el.textContent = this.profile.name;
    }
  }

  /**
   * –í–µ—Å –∏ —Ü–µ–ª—å
   */
  updateWeightAndGoal() {
    const el = document.getElementById('current-stats');
    if (!el) return;

    const goalLabels = {
      lose: '–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å',
      maintain: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É',
      gain: '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É'
    };

    el.innerHTML = `
      <div class="stat-row">
        <strong>‚öñÔ∏è ${this.profile.weight} –∫–≥</strong>
        <small>–†–æ—Å—Ç ${this.profile.height} —Å–º ‚Ä¢ ${this.profile.age} –ª–µ—Ç</small>
      </div>
      <div class="stat-row">
        <strong>üéØ ${goalLabels[this.profile.goal] || '‚Äî'}</strong>
      </div>
    `;
  }

  /**
   * –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–∏–∑ localStorage)
   */
  updateLastWorkout() {
    const el = document.getElementById('last-workout');
    if (!el) return;

    const last = StorageManager.getItem('morphe-last-workout');
    if (last) {
      const date = new Date(last.timestamp);
      const day = date.toLocaleDateString('ru-RU', { day: '2-digit', month: 'short' });
      el.innerHTML = `<strong>${day}</strong>: ${last.workoutName}`;
    } else {
      el.textContent = '‚Äî';
    }
  }

    /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–µ—Å–∞
   */
  async updateWeightDisplay() {
    const el = document.getElementById('current-stats');
    if (!el || !this.profile) return;

    const tracker = new (await import('../modules/progressTracker.js')).ProgressTracker();
    const last = tracker.getLast();

    if (last) {
      el.querySelector('.stat-row:first-child strong').textContent = `‚öñÔ∏è ${last.weight} –∫–≥`;
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è –≤–µ—Å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
  }

  /**
   * –£—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞)
   */
  updateReadiness() {
    const el = document.getElementById('readiness-score');
    if (!el) return;

    // –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞: –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ü–µ–ª–∏, –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    const today = new Date().getDay(); // 0 ‚Äî –≤—Å, 6 ‚Äî —Å–±
    const isHighLoadDay = [1, 3, 5].includes(today); // –ü–Ω, –°—Ä, –ü—Ç ‚Äî —Å–∏–ª–æ–≤—ã–µ
    const readiness = isHighLoadDay ? 7 : 9;

    el.innerHTML = `
      <div class="score-badge" data-readiness="${readiness}">
        ${this.getReadinessEmoji(readiness)} –£—Ä–æ–≤–µ–Ω—å: ${readiness}/10
      </div>
      <small>${this.getReadinessAdvice(readiness)}</small>
    `;
  }

  getReadinessEmoji(score) {
    if (score >= 8) return 'üü¢';
    if (score >= 6) return 'üü°';
    return 'üî¥';
  }

  getReadinessAdvice(score) {
    if (score >= 8) return '–û—Ç–ª–∏—á–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å! –ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.';
    if (score >= 6) return '–•–æ—Ä–æ—à–æ, –Ω–æ —Å–ª—É—à–∞–π —Ç–µ–ª–æ. –ù–µ —Ñ–æ—Ä—Å–∏—Ä—É–π.';
    return '–ù–∏–∑–∫–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å. –õ—É—á—à–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –ª—ë–≥–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.';
  }

  /**
   * CTA: –∏–∑–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
   */
  updateCTA() {
    const cta = document.querySelector('.cta-button');
    if (!cta) return;

    const hour = new Date().getHours();
    let text = '–ù–∞—á–∞—Ç—å –º–æ—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Üí';

    if (hour >= 5 && hour < 12) {
      text = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–∞—Ç—å –¥–µ–Ω—å —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? üí™';
    } else if (hour >= 12 && hour < 18) {
      text = '–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É? üöÄ';
    } else {
      text = '–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å —Å–µ–≥–æ–¥–Ω—è —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ üåô';
    }

    cta.textContent = text;
  }

  /**
   * –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
   */
  showGuestView() {
    const el = document.getElementById('user-greeting');
    if (el) el.textContent = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    const stats = document.getElementById('current-stats');
    if (stats) {
      stats.innerHTML = `<p><a href="/pages/profile.html" class="link-primary">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</a>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.</p>`;
    }
  }

    /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç –ò–ò –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
   */
  async updateAISuggestion() {
    const el = document.getElementById('ai-suggestion');
    if (!el) return;

    try {
      const ai = new (await import('../core/aiAssistant.js')).AIAssistant();
      const advice = await ai.generateAdvice();

      el.innerHTML = `
        <div class="ai-badge">${advice.emoji || 'üí°'}</div>
        <div class="ai-text">
          <strong>${advice.title}</strong>
          <small>${advice.message}</small>
        </div>
      `;
    } catch (err) {
      el.innerHTML = '<small>–°–æ–≤–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.</small>';
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
   */
  showError(message) {
    const el = document.getElementById('dashboardStatus') || document.body;
    el.innerHTML = `<p class="error-text">${message}</p>`;
  }
}