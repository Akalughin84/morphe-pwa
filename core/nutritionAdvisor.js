// core/nutritionAdvisor.js

export class NutritionAdvisor {
  constructor(profile, history) {
    this.profile = profile;
    this.history = history;
  }

  getAdvice() {
    const tips = [];
    const dailyLog = this.history.nutritionLog?.slice(-7) || [];
    const workoutHistory = this.history.workouts?.slice(-7) || [];

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–ª–∫–∞
    const avgProtein = this.calcAvg(dailyLog, 'protein');
    const targetProtein = Math.round(2.2 * this.profile.weight);
    if (avgProtein < targetProtein * 0.8) {
      tips.push({
        type: 'nutrition',
        text: `üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –±–µ–ª–∫–∞: ${Math.round(avgProtein)} –∏–∑ ${targetProtein} –≥/–¥–µ–Ω—å. –î–æ–±–∞–≤—å—Ç–µ —Ç–≤–æ—Ä–æ–≥, —è–π—Ü–∞ –∏–ª–∏ –ø—Ä–æ—Ç–µ–∏–Ω ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –º—ã—à—Ü –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.`
      });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≤–æ—â–µ–π / –∫–ª–µ—Ç—á–∞—Ç–∫–∏ (–∫–æ—Å–≤–µ–Ω–Ω–æ)
    const hasGreenDays = dailyLog.some(day => 
      day.items?.some(i => ['–æ–≤–æ—â–∏', '—à–ø–∏–Ω–∞—Ç', '–±—Ä–æ–∫–∫–æ–ª–∏'].some(k => i.foodName?.includes(k)))
    );
    if (!hasGreenDays) {
      tips.push({
        type: 'nutrition',
        text: `ü•ó –¢—ã –¥–∞–≤–Ω–æ –Ω–µ –µ–ª –∑–µ–ª—ë–Ω—ã—Ö –æ–≤–æ—â–µ–π. –î–æ–±–∞–≤—å —à–ø–∏–Ω–∞—Ç –∏–ª–∏ –±—Ä–æ–∫–∫–æ–ª–∏ ‚Äî –æ–Ω–∏ —É–ª—É—á—à–∞—é—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ –∏ —Å–Ω–∏–∂–∞—é—Ç –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ.`
      });
    }

    // 3. –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è
    const avgWater = this.history.hydration?.avg || 2.0;
    if (avgWater < 2.5) {
      tips.push({
        type: 'info',
        text: `üíß –ü–µ–π –±–æ–ª—å—à–µ –≤–æ–¥—ã! –ú–∏–Ω–∏–º—É–º 30 –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞ ‚Äî —Ç–µ–±–µ –Ω—É–∂–Ω–æ ~${Math.round(this.profile.weight * 30 / 1000)} –ª –≤ –¥–µ–Ω—å.`
      });
    }

    // 4. –ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –±–µ–ª–æ–∫
    const lastWorkout = workoutHistory.find(w => w.completed);
    const lastMeal = dailyLog[dailyLog.length - 1];
    if (lastWorkout && lastMeal) {
      const workoutTime = new Date(lastWorkout.date).getTime();
      const mealTime = new Date(lastMeal.date).getTime();
      const diffHours = (mealTime - workoutTime) / (1000 * 60 * 60);

      if (diffHours > 1.5 && !this.containsProtein(lastMeal)) {
        tips.push({
          type: 'recovery',
          text: `ü•õ –ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–µ–π –±–µ–ª–æ–∫ (—Ç–≤–æ—Ä–æ–≥, —è–π—Ü–∞, –ø—Ä–æ—Ç–µ–∏–Ω) –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 —á–∞—Å–æ–≤ ‚Äî —ç—Ç–æ —É—Å–∫–æ—Ä–∏—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º—ã—à—Ü.`
        });
      }
    }

    // 5. –°–∫—Ä—ã—Ç—ã–µ –∫–∞–ª–æ—Ä–∏–∏
    if (this.profile.goal === 'fatloss' && this.history.weightTrend === 'plateau') {
      tips.push({
        type: 'info',
        text: `üîç –í–µ—Å —Å—Ç–æ–∏—Ç? –ü—Ä–æ–≤–µ—Ä—å —Å–∫—Ä—ã—Ç—ã–µ –∫–∞–ª–æ—Ä–∏–∏: –æ—Ä–µ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, —Å–æ—É—Å—ã, –∞–ª–∫–æ–≥–æ–ª—å. –ò–Ω–æ–≥–¥–∞ 200 –∫–∫–∞–ª ‚Äú–Ω–µ–≤–∏–¥–∏–º–æ‚Äù –º–µ—à–∞—é—Ç –ø–æ—Ö—É–¥–µ–Ω–∏—é.`
      });
    }

    // 6. –ó–∏–º–∞ ‚Äî –≤–∏—Ç–∞–º–∏–Ω D
    const month = new Date().getMonth();
    if ([11, 0, 1].includes(month)) { // –¥–µ–∫, —è–Ω–≤, —Ñ–µ–≤
      tips.push({
        type: 'nutrition',
        text: `‚ùÑÔ∏è –ó–∏–º–æ–π –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–∏—Ç–∞–º–∏–Ω–∞ D. –ü—Ä–∏–Ω–∏–º–∞–π 1000‚Äì2000 –ú–ï –≤ –¥–µ–Ω—å –∏–ª–∏ –µ—à—å –∂–∏—Ä–Ω—É—é —Ä—ã–±—É. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –∏ —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞.`
      });
    }

    // 7. –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ ‚Äî —Ä–∞–∑–≥—Ä—É–∑–∫–∞
    const intenseDays = workoutHistory.filter(w => w.intensity > 7).length;
    if (intenseDays >= 4) {
      tips.push({
        type: 'warning',
        text: `‚ö†Ô∏è –£ —Ç–µ–±—è –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–≥—Ä—É–∑–æ—á–Ω—É—é –Ω–µ–¥–µ–ª—é ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å—É –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ.`
      });
    }

    // 8. –î–µ—Ñ–∏—Ü–∏—Ç –æ–º–µ–≥–∞-3
    if (!this.history.eatsFishRegularly) {
      tips.push({
        type: 'nutrition',
        text: `üêü –¢—ã —Ä–µ–¥–∫–æ –µ—à—å –∂–∏—Ä–Ω—É—é —Ä—ã–±—É. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏—ë–º –æ–º–µ–≥–∞-3 ‚Äî —ç—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ.`
      });
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º ‚Äî –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ñ–∏–¥–±—ç–∫
    if (tips.length === 0) {
      tips.push({
        type: 'success',
        text: `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—ë –ø–∏—Ç–∞–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ —Ç–µ–º–ø–µ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥—ë—Ç.`
      });
    }

    return tips;
  }

  calcAvg(log, field) {
    if (!log || log.length === 0) return 0;
    const sum = log.reduce((acc, day) => acc + (day[field] || 0), 0);
    return sum / log.length;
  }

  containsProtein(meal) {
    return meal.items?.some(i => 
      ['—Ç–≤–æ—Ä–æ–≥', '—è–π—Ü–∞', '–ø—Ä–æ—Ç–µ–∏–Ω', '–∫—É—Ä–∏—Ü–∞', '—Ä—ã–±–∞'].some(k => i.foodName?.includes(k))
    );
  }
}