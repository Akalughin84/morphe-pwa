// core/workoutPlanner.js

import { AdaptiveEngine } from './adaptiveEngine.js';

export class WorkoutPlanner {
  constructor(profile, history = {}) {
    this.profile = profile;
    this.history = history;
    this.engine = new AdaptiveEngine(profile, history);
    this.exercises = this.loadExercises();
  }

  loadExercises() {
    // –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ /data/exercises.json
    return [
      // Push
      { id: 'push_up', name: '–û—Ç–∂–∏–º–∞–Ω–∏—è', type: 'push', equipment: [], primary: 'chest' },
      { id: 'db_bench_press', name: '–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª—ë–∂–∞', type: 'push', equipment: ['dumbbells', 'bench'], primary: 'chest' },
      { id: 'overhead_press', name: '–ñ–∏–º —Å—Ç–æ—è', type: 'push', equipment: ['dumbbells'], primary: 'shoulders' },
      
      // Pull
      { id: 'row_incline', name: '–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ', type: 'pull', equipment: ['dumbbells'], primary: 'back' },
      { id: 'lat_pulldown', name: '–¢—è–≥–∞ –±–ª–æ–∫–∞ –∫ –ø–æ—è—Å—É', type: 'pull', equipment: ['machine'], primary: 'back' },
      { id: 'face_pull', name: '–§–µ–π—Å–ø–∞–ª–ª—ã', type: 'pull', equipment: ['cable'], primary: 'rear_delts' },

      // Legs
      { id: 'goblet_squat', name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∞–Ω—Ç–µ–ª—å—é', type: 'legs', equipment: ['dumbbells'], primary: 'quads' },
      { id: 'split_squat', name: '–í—ã–ø–∞–¥—ã', type: 'legs', equipment: ['dumbbells'], primary: 'quads' },
      { id: 'hamstring_curl', name: '–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥', type: 'legs', equipment: ['machine'], primary: 'hamstrings' },

      // Core
      { id: 'plank', name: '–ü–ª–∞–Ω–∫–∞', type: 'core', equipment: [], primary: 'core' }
    ];
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
  plan() {
    const state = this.engine.analyze();
    const recommendation = this.engine.getRecommendation();

    console.log('üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:', recommendation);

    switch (recommendation) {
      case 'deload':
        return this.generateDeloadProgram();
      case 'modify_exercises':
        return this.generateSafeProgram();
      case 'simplify':
        return this.generateSimpleProgram();
      case 'change_stimulus':
        return this.generateNewStimulusProgram();
      default:
        return this.generateAdaptiveProgram();
    }
  }

  // === –ü–†–û–ì–†–ê–ú–ú–´ ===

  generateAdaptiveProgram() {
    const priority = this.profile.priority || 'balanced';
    const goal = this.profile.goal;

    if (priority === 'time') {
      return this.generateFullBody3xWeek();
    } else if (priority === 'strength') {
      return this.generateStrengthOriented();
    } else if (priority === 'muscle') {
      return this.generateHypertrophySplit();
    } else {
      return this.generateUpperLower();
    }
  }

  // 1. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –≤—Ä–µ–º—è
  generateFullBody3xWeek() {
    return [
      {
        day: 1,
        type: 'fullBody',
        name: 'üî• –ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ (–±—ã—Å—Ç—Ä–æ)',
        description: '3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, 3 –ø–æ–¥—Ö–æ–¥–∞, –º–∏–Ω–∏–º—É–º –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏',
        exercises: [
          { ...this.getExercise('goblet_squat'), sets: 3, reps: '12-15', rest: '60 —Å–µ–∫' },
          { ...this.getExercise('db_bench_press'), sets: 3, reps: '10-12', rest: '60 —Å–µ–∫' },
          { ...this.getExercise('row_incline'), sets: 3, reps: '12-15', rest: '60 —Å–µ–∫' }
        ]
      },
      {
        day: 3,
        type: 'fullBody',
        name: 'üî• –ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ (–±—ã—Å—Ç—Ä–æ)',
        description: '–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π –∞–∫—Ü–µ–Ω—Ç: —Å–ø–∏–Ω–∞ + –∫–æ—Ä–∞',
        exercises: [
          { ...this.getExercise('split_squat'), sets: 3, reps: '12-15', rest: '60 —Å–µ–∫' },
          { ...this.getExercise('lat_pulldown'), sets: 3, reps: '10-12', rest: '60 —Å–µ–∫' },
          { ...this.getExercise('plank'), sets: 3, reps: '45 —Å–µ–∫', rest: '30 —Å–µ–∫' }
        ]
      }
    ];
  }

  // 2. –î–ª—è —Ä–æ—Å—Ç–∞ —Å–∏–ª—ã
  generateStrengthOriented() {
    return [
      {
        day: 1,
        type: 'upper',
        name: 'üí™ –í–µ—Ä—Ö —Ç–µ–ª–∞ (—Å–∏–ª–∞)',
        description: '–í—ã—Å–æ–∫–∏–π –≤–µ—Å, –Ω–∏–∑–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π ‚Äî —Ñ–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –∂–∏–º–∞ –∏ —Ç—è–≥–∏',
        exercises: [
          { ...this.getExercise('db_bench_press'), sets: 5, reps: '4-6', rest: '120 —Å–µ–∫', progression: '+2 –∫–≥ –∏–ª–∏ +1 –ø–æ–≤—Ç' },
          { ...this.getExercise('overhead_press'), sets: 4, reps: '6-8', rest: '90 —Å–µ–∫', progression: '+1 –ø–æ–≤—Ç' },
          { ...this.getExercise('row_incline'), sets: 4, reps: '8-10', rest: '75 —Å–µ–∫' }
        ]
      },
      {
        day: 3,
        type: 'lower',
        name: 'ü¶µ –ù–∏–∂ —Ç–µ–ª–∞ (—Å–∏–ª–∞)',
        description: '–†–∞–±–æ—Ç–∞ —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π ‚Äî —Ñ–æ–∫—É—Å –Ω–∞ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è—Ö',
        exercises: [
          { ...this.getExercise('goblet_squat'), sets: 5, reps: '5-6', rest: '120 —Å–µ–∫', progression: '+2 –∫–≥' },
          { ...this.getExercise('split_squat'), sets: 3, reps: '10-12', rest: '60 —Å–µ–∫' },
          { ...this.getExercise('hamstring_curl'), sets: 3, reps: '12-15', rest: '60 —Å–µ–∫' }
        ]
      }
    ];
  }

  // 3. –î–ª—è —Ä–æ—Å—Ç–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã
  generateHypertrophySplit() {
    return [
      {
        day: 1,
        type: 'push',
        name: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –ì—Ä—É–¥—å/–ü–ª–µ—á–∏/–¢—Ä–∏—Ü–µ–ø—Å',
        description: '–í—ã—Å–æ–∫–∏–π –æ–±—ä—ë–º, —Å—Ä–µ–¥–Ω–∏–µ –≤–µ—Å–∞ ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –≥–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏–∏',
        exercises: [
          { ...this.getExercise('db_bench_press'), sets: 4, reps: '8-12', rest: '90 —Å–µ–∫' },
          { ...this.getExercise('overhead_press'), sets: 3, reps: '10-15', rest: '75 —Å–µ–∫' },
          { ...this.getExercise('push_up'), sets: 3, reps: '–¥–æ –æ—Ç–∫–∞–∑–∞', rest: '60 —Å–µ–∫' }
        ]
      },
      {
        day: 3,
        type: 'pull',
        name: 'üèãÔ∏è‚Äç‚ôÄÔ∏è –°–ø–∏–Ω–∞/–ë–∏—Ü–µ–ø—Å',
        description: '–ê–∫—Ü–µ–Ω—Ç –Ω–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å',
        exercises: [
          { ...this.getExercise('lat_pulldown'), sets: 4, reps: '10-12', rest: '90 —Å–µ–∫' },
          { ...this.getExercise('row_incline'), sets: 3, reps: '12-15', rest: '75 —Å–µ–∫' },
          { ...this.getExercise('face_pull'), sets: 3, reps: '15-20', rest: '60 —Å–µ–∫' }
        ]
      },
      {
        day: 5,
        type: 'legs',
        name: 'ü¶µ –ù–æ–≥–∏ + –ö–æ—Ä–ø—É—Å',
        description: '–ü–æ–ª–Ω–∞—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞',
        exercises: [
          { ...this.getExercise('goblet_squat'), sets: 4, reps: '10-15', rest: '90 —Å–µ–∫' },
          { ...this.getExercise('split_squat'), sets: 3, reps: '12-15', rest: '75 —Å–µ–∫' },
          { ...this.getExercise('hamstring_curl'), sets: 3, reps: '15-20', rest: '60 —Å–µ–∫' },
          { ...this.getExercise('plank'), sets: 3, reps: '60 —Å–µ–∫', rest: '30 —Å–µ–∫' }
        ]
      }
    ];
  }

  // 4. –ë–∞–ª–∞–Ω—Å: Upper/Lower
  generateUpperLower() {
    return [
      {
        day: 1,
        type: 'upper',
        name: 'üí™ –í–µ—Ä—Ö —Ç–µ–ª–∞',
        description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≥—Ä—É–¥–∏, —Å–ø–∏–Ω—ã, –ø–ª–µ—á',
        exercises: [
          { ...this.getExercise('db_bench_press'), sets: 4, reps: '8-12', rest: '90 —Å–µ–∫' },
          { ...this.getExercise('row_incline'), sets: 4, reps: '10-15', rest: '75 —Å–µ–∫' },
          { ...this.getExercise('overhead_press'), sets: 3, reps: '10-12', rest: '75 —Å–µ–∫' }
        ]
      },
      {
        day: 3,
        type: 'lower',
        name: 'ü¶µ –ù–∏–∂ —Ç–µ–ª–∞',
        description: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è, –≤—ã–ø–∞–¥—ã, —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–¥–Ω–µ–π —Ü–µ–ø—å—é',
        exercises: [
          { ...this.getExercise('goblet_squat'), sets: 4, reps: '10-15', rest: '90 —Å–µ–∫' },
          { ...this.getExercise('split_squat'), sets: 3, reps: '12-15', rest: '75 —Å–µ–∫' },
          { ...this.getExercise('hamstring_curl'), sets: 3, reps: '15-20', rest: '60 —Å–µ–∫' }
        ]
      }
    ];
  }

  // 5. –†–∞–∑–≥—Ä—É–∑–∫–∞
  generateDeloadProgram() {
    return [
      {
        day: 1,
        type: 'upper',
        name: 'üîÑ –†–∞–∑–≥—Ä—É–∑–∫–∞: –í–µ—Ä—Ö —Ç–µ–ª–∞',
        description: '60% –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –≤–µ—Å–∞, 2 –ø–æ–¥—Ö–æ–¥–∞ √ó 10‚Äì15 ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏',
        exercises: [
          { ...this.getExercise('push_up'), sets: 2, reps: '10-15', rest: '60 —Å–µ–∫' },
          { ...this.getExercise('row_incline'), sets: 2, reps: '12-15', rest: '60 —Å–µ–∫' },
          { ...this.getExercise('overhead_press'), sets: 2, reps: '10-12', rest: '60 —Å–µ–∫' }
        ]
      },
      {
        day: 3,
        type: 'lower',
        name: 'üîÑ –†–∞–∑–≥—Ä—É–∑–∫–∞: –ù–∏–∂ —Ç–µ–ª–∞',
        description: '–õ—ë–≥–∫–∏–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è –∏ –≤—ã–ø–∞–¥—ã ‚Äî –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞',
        exercises: [
          { ...this.getExercise('goblet_squat'), sets: 2, reps: '12-15', rest: '60 —Å–µ–∫' },
          { ...this.getExercise('split_squat'), sets: 2, reps: '10-12', rest: '60 —Å–µ–∫' }
        ]
      }
    ];
  }

  // 6. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (–ø—Ä–∏ —Ç—Ä–∞–≤–º–µ)
  generateSafeProgram() {
    const safeExercises = this.filterHighRisk(this.exercises);
    return [
      {
        day: 1,
        type: 'safe_upper',
        name: 'üõ° –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
        warning: `–ò–∑–±–µ–≥–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ${this.profile.injuries[0]}`,
        exercises: [
          { ...this.getExercise('row_incline'), sets: 3, reps: '12-15', rest: '75 —Å–µ–∫' },
          { ...this.getExercise('face_pull'), sets: 3, reps: '15-20', rest: '60 —Å–µ–∫' }
        ]
      }
    ];
  }

  // 7. –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
  generateSimpleProgram() {
    return [
      {
        day: 1,
        type: 'fullBody',
        name: 'üü¢ –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        description: '3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, 3 –ø–æ–¥—Ö–æ–¥–∞ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–¥–µ–ª—é',
        exercises: [
          { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∞–Ω—Ç–µ–ª—å—é', sets: 3, reps: '12-15', rest: '60 —Å–µ–∫' },
          { name: '–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª—ë–∂–∞', sets: 3, reps: '10-12', rest: '60 —Å–µ–∫' },
          { name: '–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ', sets: 3, reps: '12-15', rest: '60 —Å–µ–∫' }
        ]
      }
    ];
  }

  // 8. –ù–æ–≤—ã–π —Å—Ç–∏–º—É–ª (–ø—Ä–∏ –ø–ª–∞—Ç–æ)
  generateNewStimulusProgram() {
    return [
      {
        day: 1,
        type: 'new_stimulus',
        name: 'üí• –ù–æ–≤—ã–π —Å—Ç–∏–º—É–ª!',
        description: '–ó–∞–º–µ–Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ø–ª–∞—Ç–æ',
        exercises: [
          { name: '–í—ã–ø–∞–¥—ã —Å –≥–∞–Ω—Ç–µ–ª–µ–π', sets: 4, reps: '10-12', rest: '75 —Å–µ–∫', note: '–ù–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!' },
          { name: '–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π —Å–∫–∞–º—å–µ', sets: 4, reps: '8-12', rest: '90 —Å–µ–∫', note: '–ù–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!' },
          { name: '–¢—è–≥–∞ –±–ª–æ–∫–∞ –∫ –ø–æ—è—Å—É', sets: 3, reps: '12-15', rest: '60 —Å–µ–∫' }
        ]
      }
    ];
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  getExercise(id) {
    return this.exercises.find(ex => ex.id === id) || { id, name: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ' };
  }

  filterHighRisk(exercises) {
    const riskyNames = ['overhead_press', 'bench_press', 'deep_squats'];
    return exercises.filter(ex => !riskyNames.includes(ex.id));
  }
}