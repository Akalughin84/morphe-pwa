// /core/aiAssistant.js
// v0.4.0 ‚Äî –õ–æ–∫–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (–±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞)

import { UserService } from '/services/userService.js';
import { WorkoutTracker } from '/modules/workoutTracker.js';
import { ProgressTracker } from '/modules/progressTracker.js';

/**
 * MorpheAI ‚Äî –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–≤–µ—Ç–Ω–∏–∫
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞—ë—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
 */
export class AIAssistant {
  constructor() {
    this.profile = null;
    this.workouts = new WorkoutTracker();
    this.progress = new ProgressTracker();
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async loadUserData() {
    const user = UserService.getProfile();
    if (!user) return null;

    this.profile = user.data;
    return this.profile;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
   */
  async generateAdvice() {
    const profile = await this.loadUserData();
    if (!profile) {
      return this._genericGuestAdvice();
    }

    const advicePool = [];

    // 1. –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const weeklyWorkouts = this.workouts.getWeeklyCount();
    if (weeklyWorkouts === 0) {
      advicePool.push(this._suggestStartTraining());
    } else if (weeklyWorkouts < 2) {
      advicePool.push(this._encourageConsistency());
    }

    // 2. –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–µ—Å—É
    const recentProgress = this.progress.getSince(14); // –∑–∞ 2 –Ω–µ–¥–µ–ª–∏
    if (recentProgress.length >= 2) {
      const first = recentProgress[recentProgress.length - 1];
      const last = recentProgress[0];
      const weightChange = last.weight - first.weight;

      if (profile.goal === 'lose' && weightChange > 0) {
        advicePool.push(this._adviseOnWeightGain());
      } else if (profile.goal === 'gain' && weightChange < 0.5) {
        advicePool.push(this._adviseOnMassGain());
      }
    }

    // 3. –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    const lastWorkout = this.workouts.getLast();
    if (lastWorkout) {
      const daysSince = (Date.now() - lastWorkout.timestamp) / (1000 * 60 * 60 * 24);
      if (daysSince > 3 && profile.goal !== 'maintain') {
        advicePool.push(this._remindToTrain());
      }
    }

    // 4. –¶–µ–ª–µ–≤–æ–π —Å–æ–≤–µ—Ç
    advicePool.push(this._goalSpecificTip());

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –∏–∑ –ø—É–ª–∞ (—á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è)
    return advicePool.length > 0
      ? this._pickRandom(advicePool)
      : this._neutralObservation();
  }

  _pickRandom(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  }

  _genericGuestAdvice() {
    return {
      type: 'info',
      title: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å',
      message: '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.',
      action: { text: '–ü–µ—Ä–µ–π—Ç–∏', url: '/pages/profile.html' }
    };
  }

  _suggestStartTraining() {
    return {
      type: 'motivation',
      title: '–ù–∞—á–Ω–∏—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è',
      message: '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–∞–∂–µ 20 –º–∏–Ω—É—Ç –≤ –Ω–µ–¥–µ–ª—é –º–µ–Ω—è—é—Ç –≤—Å—ë.',
      emoji: 'üí™'
    };
  }

  _encourageConsistency() {
    return {
      type: 'reminder',
      title: '–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ',
      message: '–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç.',
      emoji: 'üîÅ'
    };
  }

  _adviseOnWeightGain() {
    return {
      type: 'warning',
      title: '–í–µ—Å —Ä–∞—Å—Ç—ë—Ç, –∞ —Ü–µ–ª—å ‚Äî –ø–æ—Ö—É–¥–µ—Ç—å?',
      message: '–í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–ª–æ—Ä–∏–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–ª–∏ –º–∞–ª–æ –∫–∞—Ä–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ.',
      emoji: '‚öñÔ∏è'
    };
  }

  _adviseOnMassGain() {
    return {
      type: 'tip',
      title: '–ù—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏—Ü–∏—Ç',
      message: '–î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã –≤–∞–∂–Ω–æ –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –±–æ–ª—å—à–µ –∫–∞–ª–æ—Ä–∏–π, —á–µ–º —Ç—Ä–∞—Ç–∏—Ç–µ. –ï—à—å—Ç–µ —á–∞—â–µ.',
      emoji: 'üçó'
    };
  }

  _remindToTrain() {
    return {
      type: 'reminder',
      title: '–í—ã –¥–∞–≤–Ω–æ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å',
      message: '–¢–µ–ª–æ –ø–æ–º–Ω–∏—Ç. –í–µ—Ä–Ω–∏—Ç–µ—Å—å ‚Äî –¥–∞–∂–µ –ª—ë–≥–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–Ω–∏–º–µ—Ç —É—Ä–æ–≤–µ–Ω—å.',
      emoji: 'üèãÔ∏è‚Äç‚ôÇÔ∏è'
    };
  }

  _goalSpecificTip() {
    const tips = {
      lose: {
        type: 'tip',
        title: '–§–æ–∫—É—Å –Ω–∞ –±–µ–ª–∫–µ',
        message: '–ü—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –º—ã—à—Ü—ã: –µ—à—å—Ç–µ 1.8‚Äì2.2 –≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞.',
        emoji: 'ü•ö'
      },
      gain: {
        type: 'tip',
        title: '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏',
        message: '–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ 1‚Äì2 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é. –≠—Ç–æ –∫–ª—é—á –∫ —Ä–æ—Å—Ç—É —Å–∏–ª—ã –∏ –º–∞—Å—Å—ã.',
        emoji: 'üìà'
      },
      maintain: {
        type: 'tip',
        title: '–ë–∞–ª–∞–Ω—Å ‚Äî –≤–∞—à –¥—Ä—É–≥',
        message: '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –ù–µ –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.',
        emoji: 'üïä'
      }
    };
    return tips[this.profile.goal] || tips.maintain;
  }

  _neutralObservation() {
    return {
      type: 'info',
      title: '–í—Å—ë –∏–¥—ë—Ç —Å–≤–æ–∏–º —á–µ—Ä–µ–¥–æ–º',
      message: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ. –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–µ–Ω —Å—Ä–∞–∑—É.',
      emoji: 'üü¢'
    };
  }
}